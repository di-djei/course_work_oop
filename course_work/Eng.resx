<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="algoinfo" xml:space="preserve">
    <value>Crossover is the Genetic Algorithm’s distinguishing
feature. It involves mixing and matching parts of two
parents to form children. Let’s say the vectors are of length l. Two-point crossover implies picking two numbers c and d, and swap the indexes between them. When c = d you get an empty crossover (with 1/l probability). </value>
  </data>
  <data name="algorithmToolStripMenuItem.Text" xml:space="preserve">
    <value>algorithm info</value>
  </data>
  <data name="button1.Text" xml:space="preserve">
    <value>random</value>
  </data>
  <data name="button2.Text" xml:space="preserve">
    <value>with my points</value>
  </data>
  <data name="button4.Text" xml:space="preserve">
    <value>do crossover</value>
  </data>
  <data name="button5.Text" xml:space="preserve">
    <value>again</value>
  </data>
  <data name="button6.Text" xml:space="preserve">
    <value>exit</value>
  </data>
  <data name="courseWorkInfoToolStripMenuItem1.Text" xml:space="preserve">
    <value>course work info</value>
  </data>
  <data name="FormName" xml:space="preserve">
    <value>two-point crossover </value>
  </data>
  <data name="helpToolStripMenuItem.Text" xml:space="preserve">
    <value>help</value>
  </data>
  <data name="infoToolStripMenuItem.Text" xml:space="preserve">
    <value>info</value>
  </data>
  <data name="label1.Text" xml:space="preserve">
    <value>enter 1st and 2nd chromosome (1 and 0, delimited by spases)</value>
  </data>
  <data name="label3.Text" xml:space="preserve">
    <value>enter length of chromosomes and press "ok" to generate ramdom chromosome of this length</value>
  </data>
  <data name="label4.Text" xml:space="preserve">
    <value>new chromosomes are:</value>
  </data>
  <data name="label5.Text" xml:space="preserve">
    <value>1st and 2nd points</value>
  </data>
  <data name="label7.Text" xml:space="preserve">
    <value>choose type of crossover</value>
  </data>
  <data name="languageToolStripMenuItem.Text" xml:space="preserve">
    <value>language</value>
  </data>
  <data name="Mainbutton1.Text" xml:space="preserve">
    <value>doing algorithm</value>
  </data>
  <data name="Mainbutton2.Text" xml:space="preserve">
    <value>animated work of algorithm</value>
  </data>
  <data name="mainform" xml:space="preserve">
    <value>course work</value>
  </data>
  <data name="text1" xml:space="preserve">
    <value>To do crossover you must enter 2 chromosomes (1 and 0, delimited by spases) or generate them randomly (enter length and ckick "ok"), choose the way for generating crossower points (random or enter in spesial place) and press button "do crossover". The result chromosomes will appear lower. Press "again" to clear all and try next chromosomes. Press "exit" to close window.</value>
  </data>
  <data name="text2" xml:space="preserve">
    <value>error in entered points</value>
  </data>
  <data name="text3" xml:space="preserve">
    <value>chromosomes can't be zero length</value>
  </data>
  <data name="text4" xml:space="preserve">
    <value>chromosomes must be of equal length</value>
  </data>
  <data name="text5" xml:space="preserve">
    <value>something wrong with format of chromosomes</value>
  </data>
  <data name="text6" xml:space="preserve">
    <value>chromosomes can contain only 0 and 1!</value>
  </data>
  <data name="text7" xml:space="preserve">
    <value>points must be less then length of chromosomes</value>
  </data>
  <data name="textinfoform2" xml:space="preserve">
    <value>To do crossover you must enter the length of chromosomes and press "ok". Then the program will generate random chromosomes and draw them (different colors for visibility). Every click to "do crossover" will cause new randomly generated animated crossover. to choose another length and generate new chromosomes click "again", to close the window press "exit".</value>
  </data>
  <data name="workinfo" xml:space="preserve">
    <value>This program is a course work on subject OOP with tesis "Realization of algorithm on C# and visualization of it". Done by Ofitserova Tatiana (student of group M8O-209B-19).</value>
  </data>
</root>